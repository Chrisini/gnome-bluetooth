%%
headers
#include <Python.h>
#include "pygobject.h"
#include "gnomebt-controller.h"

void controller_register_classes(PyObject *d);
%%
modulename controller
%%
import gobject.GObject as PyGObject_Type
import btctl.Controller as PyBtctlController_Type
%%
ignore-glob
  *_get_type
%%
override gnomebt_controller_known_devices
static PyObject *
_wrap_gnomebt_controller_known_devices (PyGObject *self)
{
    GSList *dlist, *l;
    PyObject *ret;
    int len, i;

    dlist = gnomebt_controller_known_devices (
        GNOMEBT_CONTROLLER (self->obj));
    len = g_slist_length (dlist);
    ret = PyList_New (len);
    for (l = dlist, i = 0; l; l = g_slist_next (l), ++i) {
        /* dlist has two string properties and an integer, we will
           pack them into a dictionary */
        GnomebtDeviceDesc *dd = (GnomebtDeviceDesc*)l->data;
        PyList_SET_ITEM(ret, i, 
            Py_BuildValue("{s:s,s:s,s:i}",
                "name", dd->name, "bdaddr", dd->bdaddr,
                "deviceclass", dd->deviceclass));
    }
    gnomebt_device_desc_list_free (dlist);
    return ret;
}
%%
override gnomebt_controller_known_devices_of_class
static PyObject *
_wrap_gnomebt_controller_known_devices_of_class (PyGObject *self, PyObject *args)
{
    GSList *dlist, *l;
    PyObject *ret;
    int len, i;
    long cls;

    if (!PyArg_ParseTuple(args, "l", &cls))
        return NULL;

    dlist = gnomebt_controller_known_devices_of_class (
        GNOMEBT_CONTROLLER (self->obj), cls);
    len = g_slist_length (dlist);
    ret = PyList_New (len);
    for (l = dlist, i = 0; l; l = g_slist_next (l), ++i) {
        /* dlist has two string properties and an integer, we will
           pack them into a dictionary */
        GnomebtDeviceDesc *dd = (GnomebtDeviceDesc*)l->data;
        PyList_SET_ITEM(ret, i, 
            Py_BuildValue("{s:s,s:s,s:i}",
                "name", dd->name, "bdaddr", dd->bdaddr,
                "deviceclass", dd->deviceclass));
    }
    gnomebt_device_desc_list_free (dlist);
    return ret;
}
%%
override gnomebt_controller_services_for_device
static PyObject *
_wrap_gnomebt_controller_services_for_device (PyGObject *self, PyObject *args)
{
    char *bdaddr;
    GSList *slist, *chans, *l;
    PyObject *ret;

    if (!PyArg_ParseTuple(args, "s", &bdaddr))
        return NULL;
    slist = gnomebt_controller_services_for_device (
        GNOMEBT_CONTROLLER (self->obj), bdaddr);

    ret = PyDict_New ();

    for (l = slist; l != NULL; l = g_slist_next (l)) {
        int num_s,j;
        GnomebtServiceDesc *desc = (GnomebtServiceDesc*) l->data;
        num_s=g_slist_length (desc->channels);
        PyObject *chanlist = PyList_New (num_s);
        for (chans=desc->channels, j=0; chans; chans=g_slist_next(chans), ++j) {
            PyList_SET_ITEM(chanlist, j,
                Py_BuildValue("i", (guint)chans->data));
        }
        PyDict_SetItem(ret, Py_BuildValue("i", desc->id), chanlist);
    }

    gnomebt_service_list_free (slist);
    return ret;
}
%%
override gnomebt_controller_channels_for_service
static PyObject *
_wrap_gnomebt_controller_channels_for_service (PyGObject *self, PyObject *args,
    PyObject *kwargs)
{
    /* static char *kwlist[] = { "bdaddr", "service", NULL }; */
    char *bdaddr;
    long svcid;
    GSList *slist, *l;
    int len, i;
    PyObject *ret;

    if (!PyArg_ParseTuple(args,
        "sl:GnomebtController.controller_channels_for_service", 
        &bdaddr, &svcid))
        return NULL;

    slist = gnomebt_controller_channels_for_service (
        GNOMEBT_CONTROLLER (self->obj), bdaddr, svcid);
    len = g_slist_length (slist);
    ret = PyList_New (len);
    for (l = slist, i = 0; l; l = g_slist_next (l), ++i) {
        PyList_SET_ITEM(ret, i,
            Py_BuildValue("i", (guint)l->data));
    }
    g_slist_free(slist);
    return ret;
}
