/*
 *  libgnomebt -- GNOME Bluetooth libraries
 *  Copyright (C) 2003-2004 Edd Dumbill
 *
 *  This library is free software; you can redistribute it and/or
 *  modify it under the terms of the GNU Lesser General Public
 *  License as published by the Free Software Foundation; either
 *  version 2.1 of the License, or (at your option) any later version.
 *
 *  This library is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 *  Lesser General Public License for more details.
 *
 *  You should have received a copy of the GNU Lesser General Public
 *  License along with this library; if not, write to the Free Software
 *  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307  USA
 */
requires 2.0.0

%{
#include <gconf/gconf-client.h>
#include "gnomebt-fileactiondialog.h"
#include "gnomebt-icons.h"
%}

%h{
#include <glib.h>
#include <gdk-pixbuf/gdk-pixbuf.h>
#include <gtk/gtk.h>
#include <libgnomevfs/gnome-vfs-mime-handlers.h>
#include <libgnomevfs/gnome-vfs-utils.h>
#include <gnome.h>

#define GNOMEBT_FILEACTION_SAVE 0x01
#define GNOMEBT_FILEACTION_OPEN 0x02
#define GNOMEBT_FILEACTION_DELETE 0x03
%}

%{
static void make_mime_icon (GnomebtFileActionDialog *dlg);
%}

class Gnomebt:FileActionDialog from Gtk:Dialog {
	private GtkWidget *deletebutton;
	private GtkWidget *savebutton;
	private GtkWidget *openbutton;
	private GtkWidget *label;
    private GnomeVFSMimeApplication *app;
    
    private const gchar *fname;

    private GdkPixbuf *icon = { gnomebt_icon (); }
        destroywith gdk_pixbuf_unref;

    private GdkPixbuf *mimeicon = { NULL; }
        destroywith gdk_pixbuf_unref;

	private GnomeVFSFileInfo *vfsinf = { NULL; }
        destroywith gnome_vfs_file_info_unref;

    private gchar *uri = { NULL; }
        destroywith g_free;

	init (self)
	{
	}

	private void
	initialise_gui (self, const gchar *dname)
	{
		gchar *exp, *sizetext;
		GtkWidget *hbox,*vbox,*img;
        GtkWidget *iconbox, *iconimg;
        GtkWidget *detailslabel;

        /* make mime icon */
        make_mime_icon (self);
        
		/* border & spacing */
		gtk_box_set_spacing (GTK_BOX (GTK_DIALOG(self)->vbox), 12);
		gtk_window_set_resizable (GTK_WINDOW (self), FALSE);
		gtk_dialog_set_has_separator (GTK_DIALOG (self), FALSE);

		gtk_container_set_border_width (GTK_CONTAINER (self), 6);


		hbox = GTK_WIDGET (gtk_hbox_new (FALSE, 12));
		gtk_container_set_border_width (GTK_CONTAINER (hbox), 6);

		gtk_container_add (GTK_CONTAINER(GTK_DIALOG(self)->vbox), 
			hbox);

		vbox = GTK_WIDGET (gtk_vbox_new (FALSE, 12));

		/* image */
		img = GTK_WIDGET (gtk_image_new_from_stock (
            GTK_STOCK_DIALOG_QUESTION,
            GTK_ICON_SIZE_DIALOG));

		gtk_window_set_icon (GTK_WINDOW (self), self->_priv->icon);
		gtk_misc_set_alignment (GTK_MISC (img), 0.0, 0.0);

		/* fill up hbox */
		gtk_container_add (GTK_CONTAINER(hbox), img);
		gtk_container_add (GTK_CONTAINER(hbox), vbox);

		/* make widgets */
        /* only add open button if there's something to open */
        if (self->_priv->app) {
            /* g_message ("will run %s", self->_priv->app->command); */
            self->_priv->openbutton = GTK_WIDGET (gtk_dialog_add_button (
                GTK_DIALOG(self), GTK_STOCK_OPEN, GNOMEBT_FILEACTION_OPEN));
            gnome_vfs_mime_application_free (self->_priv->app);
        }

		self->_priv->deletebutton = GTK_WIDGET (gtk_dialog_add_button (
            GTK_DIALOG(self), GTK_STOCK_DELETE, GNOMEBT_FILEACTION_DELETE));

		self->_priv->savebutton = GTK_WIDGET (gtk_dialog_add_button (
			GTK_DIALOG(self), GTK_STOCK_SAVE, GNOMEBT_FILEACTION_SAVE));

		gtk_dialog_set_default_response (GTK_DIALOG(self),
			GNOMEBT_FILEACTION_SAVE);

		gtk_window_set_title (GTK_WINDOW(self), _("Bluetooth Transfer Received"));

		gtk_window_set_position (GTK_WINDOW(self),
			GTK_WIN_POS_MOUSE);

        /* FIXME: dname needs escaping */
		exp = g_strdup_printf (
				_("<span weight='bold' size='larger'>File received from '%s'. What would you like to do?</span>"), dname);

		self->_priv->label = GTK_WIDGET (gtk_label_new (NULL));


		gtk_label_set_markup (GTK_LABEL (self->_priv->label), exp);
		gtk_label_set_selectable (GTK_LABEL (self->_priv->label), TRUE);
		gtk_label_set_line_wrap (GTK_LABEL (self->_priv->label), TRUE);
		gtk_misc_set_alignment (GTK_MISC (self->_priv->label), 0.0, 0.0);

		g_free (exp);

        /* now make info box */

		gtk_container_add (GTK_CONTAINER (vbox), self->_priv->label);

        iconbox = GTK_WIDGET (gtk_hbox_new (FALSE, 12));

        iconimg = GTK_WIDGET (gtk_image_new_from_pixbuf (
            self->_priv->mimeicon));

        gtk_box_pack_start (GTK_BOX (iconbox), iconimg, FALSE, FALSE, 0);

        detailslabel = GTK_WIDGET (gtk_label_new (NULL));

        sizetext = gnome_vfs_format_file_size_for_display (
            self->_priv->vfsinf->size);

        exp = g_strdup_printf (_("<span weight='bold'>Name:</span> %s\n<span weight='bold'>Type:</span> %s\n<span weight='bold'>Size:</span> %s"),
                self->_priv->vfsinf->name,
                gnome_vfs_mime_get_description (self->_priv->vfsinf->mime_type),
                sizetext);

        g_free (sizetext);

        gtk_label_set_markup (GTK_LABEL (detailslabel), exp);
		gtk_label_set_selectable (GTK_LABEL (detailslabel), TRUE);
		gtk_label_set_line_wrap (GTK_LABEL (detailslabel), TRUE);
		gtk_misc_set_alignment (GTK_MISC (detailslabel), 0.0, 0.0);

        g_free (exp);

        gtk_box_pack_start (GTK_BOX (iconbox), detailslabel, FALSE, FALSE, 0);
        
        gtk_container_add (GTK_CONTAINER (vbox), iconbox);


		/* remember this button */

		gtk_widget_show_all (GTK_WIDGET(self));
	}

	public
	GnomebtFileActionDialog *
	new (const gchar *devname, const gchar *fname)
	{
        GnomeVFSResult res;
        gchar *uri;
		GnomebtFileActionDialog *dlg = NULL;
        GnomeVFSFileInfo *inf;

        if (! gnome_vfs_initialized ())
            gnome_vfs_init ();

        uri = (gchar *) gnome_vfs_get_uri_from_local_path ((const char *)fname);


        inf = gnome_vfs_file_info_new ();
        res = gnome_vfs_get_file_info (uri, inf,
            GNOME_VFS_FILE_INFO_FORCE_SLOW_MIME_TYPE |
            GNOME_VFS_FILE_INFO_DEFAULT |
            GNOME_VFS_FILE_INFO_GET_MIME_TYPE |
            GNOME_VFS_FILE_INFO_FOLLOW_LINKS);

        if (res == GNOME_VFS_OK) {
            dlg = GNOMEBT_FILEACTIONDIALOG (GET_NEW);
            dlg->_priv->vfsinf = inf;
            dlg->_priv->uri = uri;
            dlg->_priv->fname = fname;
            dlg->_priv->app = gnome_vfs_mime_get_default_application (
                inf->mime_type);

            /* g_message ("file is called %s, mime type is %s, size is %ld",  
                inf->name, inf->mime_type, inf->size); */

            gnomebt_fileactiondialog_initialise_gui (dlg, devname);
        } else {
            g_free (inf);
            g_free (uri);
            g_warning ("gnome_vfs_get_file_info returned error %d for uri %s", res, uri);
        }
        return dlg;
	}

    public void
    open (self)
    {
        GList *uris = NULL;
        GnomeVFSMimeApplication *app;

        uris = g_list_append (uris, self->_priv->uri);

        app = gnome_vfs_mime_get_default_application (
            self->_priv->vfsinf->mime_type);
        if (app) {
            gnome_vfs_mime_application_launch (app, uris);
            gnome_vfs_mime_application_free (app);
        }
        g_list_free (uris);
    }

    public void
    delete (self)
    {
        gnome_vfs_unlink (self->_priv->uri);
    }
}

%{
static void
make_mime_icon (GnomebtFileActionDialog *dlg)
{
    /* if it's an image, we'll attempt to thumbnail it, if it's of a
       reasonable size (under a meg) */
    GdkPixbuf *buf = NULL;
    gint width;
    gint height;
    const gchar *iconname;
    GnomeIconLookupResultFlags flags;
    GnomeThumbnailFactory *factory;
    GtkIconTheme *theme;

    factory = gnome_thumbnail_factory_new (GNOME_THUMBNAIL_SIZE_NORMAL);
    theme = gtk_icon_theme_get_default ();

    iconname = gnome_icon_lookup (theme,
        factory, dlg->_priv->uri, NULL,
        dlg->_priv->vfsinf, dlg->_priv->vfsinf->mime_type,
        GNOME_ICON_LOOKUP_FLAGS_SHOW_SMALL_IMAGES_AS_THEMSELVES |
        GNOME_ICON_LOOKUP_FLAGS_ALLOW_SVG_AS_THEMSELVES,
        &flags);

    buf = gtk_icon_theme_load_icon (theme, iconname, 48, 0, NULL);

    if (!buf) 
        buf = gdk_pixbuf_new_from_file_at_size (iconname, 48, 48, NULL);

    g_object_unref (factory);

    dlg->_priv->mimeicon = buf;
}
%}
