dnl Process this file with autoconf to produce a configure script.
AC_PREREQ(2.52)

AC_INIT(gnome-bluetooth, 0.5)
AC_CONFIG_SRCDIR(src/main.c)
AM_INIT_AUTOMAKE(AC_PACKAGE_NAME, AC_PACKAGE_VERSION)

AM_MAINTAINER_MODE
AM_CONFIG_HEADER(config.h)

AC_PROG_INTLTOOL([0.18])

dnl Initialize libtool
AM_DISABLE_STATIC
AM_PROG_LIBTOOL

AC_ISC_POSIX
AC_PROG_CC
AM_PROG_CC_STDC
AC_HEADER_STDC

dnl Check for the "check" unit test framework
dnl AC_CHECK_LIB(check,suite_create)

dnl Gettext stuff.
GETTEXT_PACKAGE="gnome-bluetooth"
AC_SUBST(GETTEXT_PACKAGE)
AC_DEFINE_UNQUOTED(GETTEXT_PACKAGE,"gnome-bluetooth", [Manage Bluetooth devices from the GNOME desktop.])

dnl Add the languages which your application supports here.
ALL_LINGUAS=""
AM_GLIB_GNU_GETTEXT

AC_SUBST(DLOPEN)
AC_SUBST(DLPREOPEN)

AM_PATH_ORBIT2([], [], [ORBit-2.0 required])
AM_GCONF_SOURCE_2

GOB2_HOOK(2.0.0,[],[AC_MSG_ERROR([Cannot find GOB-2, install from http://www.5z.com/jirka/gob.html])])

AC_PATH_PROG(PKG_CONFIG, pkg-config, no)
AC_PATH_PROG(GLIB_GENMARSHAL, glib-genmarshal, no)
PKG_CHECK_MODULES(GNOME_BLUETOOTH, libglade-2.0 gobject-2.0 libgnomeui-2.0 >= 1.110.0 gconf-2.0 libbtctl >= 0.4)
PKG_CHECK_MODULES(GNOME_BLUETOOTH_PYTHON, libglade-2.0 gobject-2.0 libgnomeui-2.0 >= 1.110.0 gconf-2.0 pygtk-2.0)

PKG_CHECK_MODULES(GNOME_BLUETOOTH_PY, pygtk-2.0, HAVE_PYTHON=yes, HAVE_PYTHON=no)
AC_MSG_CHECKING(for python support)
if test "x$HAVE_PYTHON" = "xyes"; then
    AM_PATH_PYTHON(2.2)
    AC_MSG_RESULT(yes)
    DEFSDIR=`pkg-config --variable=defsdir pygtk-2.0`
    PKG_CHECK_MODULES(GNOME_BLUETOOTH_PY, gobject-2.0 glib-2.0 pygtk-2.0)
    AC_SUBST(DEFSDIR)
else
    AC_MSG_RESULT(no)
fi
AM_CONDITIONAL(HAVE_PYTHON, [test $HAVE_PYTHON = yes])


BLUEZ_PATH_BLUETOOTH([], AC_MSG_ERROR([libbluetooth is required to build this software - part of bluez-libs]))

BLUEZ_PATH_SDP([], AC_MSG_ERROR([libsdp is required to build this software - part of bluez-sdp]))

AC_SUBST(GNOME_BLUETOOTH_CFLAGS)
AC_SUBST(GNOME_BLUETOOTH_LIBS)
AC_SUBST(GLIB_GENMARSHAL)
AC_SUBST(GNOME_BLUETOOTH_PYTHON_CFLAGS)
AC_SUBST(GNOME_BLUETOOTH_PYTHON_LIBS)

GNOME_BLUETOOTH_DATA_DIR="$datadir/gnome-bluetooth"
AC_SUBST(GNOME_BLUETOOTH_DATA_DIR)

GNOME_VFS_REQUIRED=2.1.3.1

dnl stuff for gnome-vfs module
PKG_CHECK_MODULES(VFSMOD, gnome-vfs-2.0 >= $GNOME_VFS_REQUIRED gnome-vfs-module-2.0 >= $GNOME_VFS_REQUIRED libbonobo-2.0 bonobo-activation-2.0)
AC_SUBST(VFSMOD_CFLAGS)
AC_SUBST(VFSMOD_LIBS)

dnl stuff for obex
PKG_CHECK_MODULES(GOBEX, gtk+-2.0 >= 2.0.0 gnome-vfs-2.0 librsvg-2.0 libgnomeui-2.0 libglade-2.0 libgnome-2.0 >= 2.0.0 gnome-vfs-module-2.0)
AC_SUBST(GOBEX_LIBS)
AC_SUBST(GOBEX_CFLAGS)
AM_PATH_OPENOBEX(1.0.0)

dnl python stuff
AM_PATH_PYTHON(2.2)

dnl ==========================================================================
dnl Turn on the additional warnings last, so -Werror doesn't affect other tests.
AC_ARG_ENABLE(compile-warnings,
[  --enable-compile-warnings  Maximum compiler warnings],
set_more_warnings="$enableval",[
if test -f $srcdir/CVSVERSION; then
    is_cvs_version=true
    set_more_warnings=yes
else
    set_more_warnings=no
fi
])
AC_MSG_CHECKING(for more warnings, including -Werror)
if test "$GCC" = "yes" -a "$set_more_warnings" != "no"; then
    AC_MSG_RESULT(yes)
    CFLAGS="\
    -Wall \
    -Wchar-subscripts -Wmissing-declarations -Wmissing-prototypes \
    -Wnested-externs -Wpointer-arith \
    -Wcast-align -Wsign-compare \
    -Werror \
    $CFLAGS"

    for option in -Wsign-promo -Wno-sign-compare -Wno-strict-aliasing; do
        SAVE_CFLAGS="$CFLAGS"
        CFLAGS="$CFLAGS $option"
        AC_MSG_CHECKING([whether gcc understands $option])
        AC_TRY_COMPILE([], [],
            has_option=yes,
            has_option=no,)
        if test $has_option = no; then
            CFLAGS="$SAVE_CFLAGS"
        fi
        AC_MSG_RESULT($has_option)
        unset has_option
        unset SAVE_CFLAGS
    done
    unset option
else
    AC_MSG_RESULT(no)
fi

AC_CONFIG_SUBDIRS(libegg)

AC_OUTPUT([
Makefile
src/Makefile
po/Makefile.in
obex/Makefile
python/Makefile
nautilus/Makefile
])

