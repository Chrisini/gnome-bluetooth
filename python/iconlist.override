%%
headers
#include <Python.h>               
#include "pygobject.h"
#include "eggiconlist.h"
#include "pyegg-private.h"
%%
modulename iconlist
%%
import gtk.Plug as PyGtkPlug_Type       
import gtk.gdk.Pixbuf as PyGdkPixbuf_Type
import gtk.Container as PyGtkContainer_Type
%%
ignore-glob
  *_get_type                            
%%
ignore
  egg_icon_list_item_set_data_full
%%
ignore
  egg_icon_list_foreach
%%
ignore
  egg_icon_list_selected_foreach
%%
override egg_icon_list_get_selected
static PyObject *
_wrap_egg_icon_list_get_selected (PyGObject *self)
{
    GList *sel_list, *l;
    PyObject *ret;
    int len, i;
 
    sel_list = egg_icon_list_get_selected (EGG_ICON_LIST(self->obj));
    len = g_list_length (sel_list);
    ret = PyTuple_New (len);
    for (l = sel_list, i = 0; l; l = l->next, ++i)
        PyTuple_SET_ITEM(ret, i, pyg_boxed_new (EGG_TYPE_ICON_LIST_ITEM,
            l->data, TRUE, TRUE));
    g_list_free (sel_list);
    return ret;
}

%%
override egg_icon_list_get_items
static PyObject *
_wrap_egg_icon_list_get_items (PyGObject *self)
{
    GList *item_list, *l;
    PyObject *ret;
    int len, i;
 
    item_list = egg_icon_list_get_items (EGG_ICON_LIST(self->obj));
    len = g_list_length (item_list);
    ret = PyTuple_New (len);
    for (l = item_list, i = 0; l; l = l->next, ++i)
        PyTuple_SET_ITEM(ret, i, pyg_boxed_new (EGG_TYPE_ICON_LIST_ITEM,
            l->data, TRUE, TRUE));
    g_list_free (item_list);
    return ret;
}

%%
override egg_icon_list_item_set_data kwargs
static PyObject *
_wrap_egg_icon_list_item_set_data (PyObject *self, PyObject *args,
                                   PyObject *kwargs)
{
    static char *kwlist[] = { "data", NULL };
    PyObject *data;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, 
        "O:EggIconListItem.set_data", kwlist, &data))
        return NULL;

    Py_INCREF (data);

    egg_icon_list_item_set_data_full (pyg_boxed_get (self, EggIconListItem),
        (gpointer) data, pyegg_user_data_destroy_notify);

    Py_INCREF(Py_None);
    return Py_None;
}

%%
override egg_icon_list_item_get_data
static PyObject *
_wrap_egg_icon_list_item_get_data (PyObject *self)
{
    PyObject * data;

    data = (PyObject *) egg_icon_list_item_get_data (
        pyg_boxed_get (self, EggIconListItem));

    if (data) {
        Py_INCREF (data);
        return data;
    }

    Py_INCREF(Py_None);
    return Py_None;
}

%%
override egg_icon_list_set_sort_func
static gint
pyegg_icon_list_sort_cb (EggIconList *icon_list, 
    EggIconListItem *a, EggIconListItem *b, gpointer user_data)
{
    PyGtkCustomNotify *cunote = user_data;
    PyObject *py_iconlist, *py_a, *py_b, *retobj;
    gint ret = 0;

    g_assert(cunote->func);

    pyg_block_threads();

    py_iconlist = pygobject_new((GObject *)icon_list);
    py_a = pyg_boxed_new(EGG_TYPE_ICON_LIST_ITEM, a, TRUE, TRUE);
    py_b = pyg_boxed_new(EGG_TYPE_ICON_LIST_ITEM, b, TRUE, TRUE);

    if (cunote->data) {
        retobj = PyEval_CallFunction(cunote->func, "(NNNO)", py_a,
                                     py_b, py_iconlist, cunote->data);
    } else {
        retobj = PyEval_CallFunction(cunote->func, "(NNN)", py_a,
                                     py_b, py_iconlist);
    }

    if (retobj)
        ret = PyInt_AsLong(retobj);
    if (PyErr_Occurred()) {
        PyErr_Print();
        ret = 0;
    }
    Py_XDECREF(retobj);

    pyg_unblock_threads();
    return ret;
}
static PyObject *
_wrap_egg_icon_list_set_sort_func(PyGObject *self, PyObject *args)
{
    PyObject *callback, *data = NULL;
    PyGtkCustomNotify *cunote;
                                                                                
    if (!PyArg_ParseTuple(args, "O|O:EggIconList.set_sort_func",
                          &callback, &data))
        return NULL;
                                                                                
    if (!PyCallable_Check(callback)) {
        PyErr_SetString(PyExc_TypeError, "callback must be a callable object");
        return NULL;
    }
    cunote = g_new(PyGtkCustomNotify, 1);
    Py_INCREF(callback);
    cunote->func = callback;
    Py_XINCREF(data);
    cunote->data = data;
                                                                                
    egg_icon_list_set_sort_func(EGG_ICON_LIST(self->obj),
                                    pyegg_icon_list_sort_cb, cunote,
                                    pygtk_custom_destroy_notify);

    Py_INCREF(Py_None);
    return Py_None;
}
